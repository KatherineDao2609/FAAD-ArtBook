This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-11T18:48:19.420Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
api/
  crud.js
  upload.js
models/
  ItemModel.js
public/
  assets/
    adopted.svg
    az.svg
    birthday.svg
    cake.svg
    calendar.svg
    cat.svg
    dragdrop.svg
    dry.svg
    folder.svg
    heart.svg
    load.svg
    logo.svg
    mixed.svg
    open.svg
    paw.svg
    photo.svg
    upload.svg
    wet.svg
  crud.js
  form.css
  index.html
  script.js
  style.css
  upload.js
.gitignore
database.js
filesystem.js
index.js
package.json

================================================================
Repository Files
================================================================

================
File: api/crud.js
================
// This module defines a set of CRUD endpoints for Items
// NOTE: image file uploads are handled separately.


import {mongoReady} from '../database.js'

// Import the Item schema
import {Item} from "../models/ItemModel.js"  

// Import Express so we can make API endpoints
import express from 'express' 
// active the express Router
const api = express.Router()   

// Import filesystem functionality for use in the DELETE endpoint
import {deleteFile} from "../filesystem.js"  

// CREATE ITEM (ENDPOINT)
// this endpoint looks for JSON data in the body of the request and saves a new item to MongoDB
api.post('/item', mongoReady, async (req, res) => { 
  console.log()
  try{
    delete req.body._id // don't include the _id on a new item (Mongo will create it automatically)
    const item = await Item.create(req.body)
    res.send(item) 
  }
  catch(err){
    res.status(500).send(err)
  }
})


// READ ITEMS (ENDPOINT)
api.get('/items', mongoReady, async (req, res) => {  
  try{
    // a empty filter means "find everything"
    let filter = {}   
    // let's adjust sorting based on user input.
    let sort = {} 
    if (req.query.sort == "birthDate"){
      sort.birthDate = "ascending"
    }
    if (req.query.sort == "name"){
      sort.name = "descending"
    } 
    const items = await Item.find(filter).sort(sort)  
    res.send(items)
  }
  catch(err){
    res.status(500).send(err)
  } 
})


// READ SINGLE ITEM (ENDPOINT)  
api.get('/item/:id', mongoReady, async (req, res) => {  
  try{
    const filter = {_id: req.params.id}
    const item = await Item.findOne(filter)  
    res.send(item)
  }
  catch(err){
    res.status(500).send(err)
  } 
}) 

//UPDATE ITEM (ENDPOINT)
api.put('/item/:id', mongoReady, async (req, res) => {    
  try{
    const filter = {_id: req.params.id}
    const update = req.body
    const options = {returnDocument :'after'}   // default is 'before'   
    const item = await Item.findOneAndReplace(filter, update, options) 
    res.send(item)
  }
  catch(err){
    res.status(500).send(err)
  } 
}) 

// DELETE ITEM (ENDPOINT)
api.delete('/item/:id', mongoReady, async (req, res) => {
  try{
    const filter = {_id:req.params.id} 
    // remove item from database
    const item = await Item.findOneAndDelete(filter)  
    // delete corresponding image from filesystem
    const status = (item.fileName) ? 
      await deleteFile(item.fileName) : 
      "Item has no fileName. Delete operation has been skipped."
    res.send({status})   
  }
  catch(err){  
    console.log(err)
    res.status(500).send(err) 
  }
})


export { api as crudEndpoints }

================
File: api/upload.js
================
// This file defines an express endpoint for uploading an image file.
// it includes a feature for resizing the image to fit a given dimension.
// Uploads are stored in the Replit filesystem (not in the database)
// NOTE: Image Metadata and captions ARE saved in MongoDB but are handled elsewhere

//=============
// CONFIGURATION 
// The uploaded image will be resized to fit the following dimensions
const maxWidth = 800
const maxHeight = 800
// set the folder where uploads will be stored. (e.g. /public/uploads )
// see also: https://nodejs.org/api/path.html#pathjoinpaths
// NOTE: "cwd" stands for "Current Working Directory"
const uploadsFolder =  path.join( process.cwd(), 'public', 'uploads') 

// ====================
// IMPORT LIBRARIES
// Import Express so we can make API endpoints
import express from 'express' 
// activate the express Router
const api = express.Router()  
// Import "busboy" library to  handle our "luggage" e.g. (file uploads)
// https://www.npmjs.com/package/busboy
import busboy from 'busboy'
// Import "sharp" library to resize images
// https://www.npmjs.com/package/sharp
import sharp from 'sharp'
// Import "fs" (filesystem) library to help save/store image files on Replit
import fs from 'fs'
// Import the "path" library to help construct file and folder paths
import path from 'path'

//===================
// FILE UPLOAD (API ENDPOINT)
// listen for a POST request with a file attachment.
// NOTE: the encoding of this request should be "multipart/form-data"
api.post("/upload", async (req, res) => {
  // Check to ensure the uploads folder exists (if not, then create it)
  if (!fs.existsSync(uploadsFolder)) fs.mkdirSync(uploadsFolder, { recursive: true })
  // Setup busboy to handle file uploads; pass along request headers to busboy
  const bb = busboy({ headers: req.headers })
  // the code below runs whenever busboy receives an uploaded file 
  bb.on('file', (name, file, info) => { 
    // Get the original file extension (e.g. .png, .jpg, etc.)
    const fileExt = path.extname(info.filename)
    // Generate a unique numeric file name for the upload. e.g. 1699020244125.jpg
    // NOTE: this is based on the current timestamp and prevents overwriting existing files.
    info.newFileName = new Date().getTime() + fileExt
    // Define a place to store the original image temporarily
    const tempPath = path.join(uploadsFolder, 'temp_' + info.newFileName)
    // Define a destination path for the final resized image
    const destPath = path.join(uploadsFolder, info.newFileName)
    // define a stream to save the uploaded image data to its temporary location
    // https://mdn.io/Streams_API/Concepts
    const stream = fs.createWriteStream(tempPath)
    // when the data stream is finished writing, the "close" event will fire below
    stream.on('close', async () => { 
      // at this point the full resolution image has been saved to a temporary location.
      try {
        // svg files do not need to be resized.
        if (info.mimeType.startsWith("image/svg") ){
          // in this case rename the temporary file to use the destination path.
          await fs.promises.rename(tempPath, destPath) 
        }
        // non vector images should be resized to fit
        else{
          // Resize the temporary image to fit maxWidth and maxHeight
          await sharp(tempPath)
            // to retain metadata,  including rotation info, uncomment the following line. 
            // .withMetadata()
            .resize(maxWidth, maxHeight, {
              fit: "inside",  // preserve aspect ratio
              withoutEnlargement: true  // don't enlarge 
            }) 
            .toFile(destPath) // output the result to the final destination
          // Delete (unlink) the temporary file from the filesystem
          await fs.promises.unlink(tempPath)
        } 
        // Finished! Now send details about the upload back to the frontend.
        res.send(info) 
      } catch (error) {
        // if anything goes wrong, log the issue to the console.
        console.error( error)
        res.status(500).send(error)
      }
    })
    // send the uploaded data to the above stream for saving
    file.pipe(stream)
  }) 
  // send the incoming request to busboy for processing
  req.pipe(bb)
})


// Export the file upload endpoint
// NOTE: see index.js for the corresponding import and activation
export { api as uploadEndpoint }

================
File: models/ItemModel.js
================
import mongoose from 'mongoose'
  
// To make your own Schema, check the documentation Here:
// https://mongoosejs.com/docs/guide.html#definition
// You can also try a Schema Generator like this one:
// https://bender.sheridanc.on.ca/system-design/schema-generator 

const schema = new mongoose.Schema({ 
  "program": { "type": "String", required: true },
  "year": { "type": "String",required: true },
  "workTitle": { "type": "String", required: true },
  "studentName": { "type": "String" },
  "fileName": { "type": "String" }
  
}) 

const Item = mongoose.model('Items', schema);
  

export { Item };

================
File: public/assets/adopted.svg
================
<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 576 512" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9l2.6-2.4C267.2 438.6 256 404.6 256 368c0-97.2 78.8-176 176-176c28.3 0 55 6.7 78.7 18.5c.9-6.5 1.3-13 1.3-19.6v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5zM576 368a144 144 0 1 0 -288 0 144 144 0 1 0 288 0zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L416 385.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z"></path></svg>

================
File: public/assets/az.svg
================
<svg xmlns="http://www.w3.org/2000/svg" stroke="currentColor" fill="#ffffff" stroke-width="0" viewBox="0 0 448 512" height="1em" width="1em"><path d="M176 352h-48V48a16 16 0 0 0-16-16H80a16 16 0 0 0-16 16v304H16c-14.19 0-21.36 17.24-11.29 27.31l80 96a16 16 0 0 0 22.62 0l80-96C197.35 369.26 190.22 352 176 352zm240-64H288a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h56l-61.26 70.45A32 32 0 0 0 272 446.37V464a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-56l61.26-70.45A32 32 0 0 0 432 321.63V304a16 16 0 0 0-16-16zm31.06-85.38l-59.27-160A16 16 0 0 0 372.72 32h-41.44a16 16 0 0 0-15.07 10.62l-59.27 160A16 16 0 0 0 272 224h24.83a16 16 0 0 0 15.23-11.08l4.42-12.92h71l4.41 12.92A16 16 0 0 0 407.16 224H432a16 16 0 0 0 15.06-21.38zM335.61 144L352 96l16.39 48z"/></svg>

================
File: public/assets/birthday.svg
================
<svg   fill="#ffffff" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 6a2 2 0 0 0 2-2c0-.38-.1-.73-.29-1.03L12 0l-1.71 2.97c-.19.3-.29.65-.29 1.03 0 1.1.9 2 2 2zm4.6 9.99-1.07-1.07-1.08 1.07c-1.3 1.3-3.58 1.31-4.89 0l-1.07-1.07-1.09 1.07C6.75 16.64 5.88 17 4.96 17c-.73 0-1.4-.23-1.96-.61V21c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-4.61c-.56.38-1.23.61-1.96.61-.92 0-1.79-.36-2.44-1.01zM18 9h-5V7h-2v2H6c-1.66 0-3 1.34-3 3v1.54c0 1.08.88 1.96 1.96 1.96.52 0 1.02-.2 1.38-.57l2.14-2.13 2.13 2.13c.74.74 2.03.74 2.77 0l2.14-2.13 2.13 2.13c.37.37.86.57 1.38.57 1.08 0 1.96-.88 1.96-1.96V12C21 10.34 19.66 9 18 9z"></path></svg>

================
File: public/assets/cake.svg
================
<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 448 512" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M448 384c-28.02 0-31.26-32-74.5-32-43.43 0-46.825 32-74.75 32-27.695 0-31.454-32-74.75-32-42.842 0-47.218 32-74.5 32-28.148 0-31.202-32-74.75-32-43.547 0-46.653 32-74.75 32v-80c0-26.5 21.5-48 48-48h16V112h64v144h64V112h64v144h64V112h64v144h16c26.5 0 48 21.5 48 48v80zm0 128H0v-96c43.356 0 46.767-32 74.75-32 27.951 0 31.253 32 74.75 32 42.843 0 47.217-32 74.5-32 28.148 0 31.201 32 74.75 32 43.357 0 46.767-32 74.75-32 27.488 0 31.252 32 74.5 32v96zM96 96c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40zm128 0c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40zm128 0c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40z"></path></svg>

================
File: public/assets/calendar.svg
================
<svg xmlns="http://www.w3.org/2000/svg" stroke="currentColor" fill="#ffffff" stroke-width="0" viewBox="0 0 448 512" height="1em" width="1em"><path d="M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"/></svg>

================
File: public/assets/cat.svg
================
<svg xmlns="http://www.w3.org/2000/svg" stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 256 256" height="1em" width="1em"><path d="M224,48v88c0,48.6-43,88-96,88s-96-39.4-96-88V48a8,8,0,0,1,13.66-5.66L67.6,67.6h0a102.87,102.87,0,0,1,120.8,0h0l21.94-25.24A8,8,0,0,1,224,48Z" opacity="0.2"/><path d="M96,140a12,12,0,1,1-12-12A12,12,0,0,1,96,140Zm76-12a12,12,0,1,0,12,12A12,12,0,0,0,172,128Zm60-80v88c0,52.93-46.65,96-104,96S24,188.93,24,136V48A16,16,0,0,1,51.31,36.69c.14.14.26.27.38.41L69,57a111.22,111.22,0,0,1,118.1,0L204.31,37.1c.12-.14.24-.27.38-.41A16,16,0,0,1,232,48Zm-16,0-21.56,24.8A8,8,0,0,1,183.63,74,88.86,88.86,0,0,0,168,64.75V88a8,8,0,1,1-16,0V59.05a97.43,97.43,0,0,0-16-2.72V88a8,8,0,1,1-16,0V56.33a97.43,97.43,0,0,0-16,2.72V88a8,8,0,1,1-16,0V64.75A88.86,88.86,0,0,0,72.37,74a8,8,0,0,1-10.81-1.17L40,48v88c0,41.66,35.21,76,80,79.67V195.31l-13.66-13.66a8,8,0,0,1,11.32-11.31L128,180.68l10.34-10.34a8,8,0,0,1,11.32,11.31L136,195.31v20.36c44.79-3.69,80-38,80-79.67Z"/></svg>

================
File: public/assets/dragdrop.svg
================
<svg xmlns="http://www.w3.org/2000/svg" stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em"><g><path fill="none" d="M0 0h24v24H0z"/><path fill-rule="nonzero" d="M16 13l6.964 4.062-2.973.85 2.125 3.681-1.732 1-2.125-3.68-2.223 2.15L16 13zm-2-7h2v2h5a1 1 0 0 1 1 1v4h-2v-3H10v10h4v2H9a1 1 0 0 1-1-1v-5H6v-2h2V9a1 1 0 0 1 1-1h5V6zM4 14v2H2v-2h2zm0-4v2H2v-2h2zm0-4v2H2V6h2zm0-4v2H2V2h2zm4 0v2H6V2h2zm4 0v2h-2V2h2zm4 0v2h-2V2h2z"/></g></svg>

================
File: public/assets/dry.svg
================
<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0V0z"></path><path d="M10 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM6 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12-8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-4 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></svg>

================
File: public/assets/folder.svg
================
<svg xmlns="http://www.w3.org/2000/svg"   fill="#ffffff"  viewBox="0 0 512 512" height="1em" width="1em"><path d="M464,128H272L208,64H48A48,48,0,0,0,0,112V400a48,48,0,0,0,48,48H464a48,48,0,0,0,48-48V176A48,48,0,0,0,464,128ZM359.5,296a16,16,0,0,1-16,16h-64v64a16,16,0,0,1-16,16h-16a16,16,0,0,1-16-16V312h-64a16,16,0,0,1-16-16V280a16,16,0,0,1,16-16h64V200a16,16,0,0,1,16-16h16a16,16,0,0,1,16,16v64h64a16,16,0,0,1,16,16Z"/></svg>

================
File: public/assets/heart.svg
================
<svg xmlns="http://www.w3.org/2000/svg" stroke="currentColor" fill="#ffffff" stroke-width="0" viewBox="0 0 16 16" height="1em" width="1em"><path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/></svg>

================
File: public/assets/load.svg
================
<svg version="1.1" id="L4" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 50 10" enable-background="new 0 0 0 0" xml:space="preserve">
  <circle fill="#000" stroke="none" cx="5" cy="5" r="5">
    <animate attributeName="opacity" dur="1s" values="0;1;0" repeatCount="indefinite" begin="0.1"></animate>    
  </circle>
  <circle fill="#000" stroke="none" cx="25" cy="5" r="5">
    <animate attributeName="opacity" dur="1s" values="0;1;0" repeatCount="indefinite" begin="0.2"></animate>       
  </circle>
  <circle fill="#000" stroke="none" cx="45" cy="5" r="5">
    <animate attributeName="opacity" dur="1s" values="0;1;0" repeatCount="indefinite" begin="0.3"></animate>     
  </circle>
</svg>

================
File: public/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg"  stroke-width="0" viewBox="0 0 512 512" height="1em" width="1em"> 
    <symbol id="catIcon">
        <path d="M463.46 37.008l-30.694 50.738-7.043-2.28c-27.146-8.797-71.525-7.15-97.6.11L321.22 87.5l-28.68-48.543c-33.63 69.254-32.264 117.56-14.79 148.574 18.71 33.208 57.378 49.09 99.117 48.574 48.743-.606 88.968-19.665 107.035-54.194 16.918-32.332 15.684-80.456-20.443-144.902zM323.935 137.594c18.45.1 29.36 15.338 31.462 36.644-37.11 17.91-53.963 3.398-61.173-26.545 11.382-7.063 21.324-10.144 29.71-10.1zm109.26 0c8.385-.045 18.328 3.036 29.71 10.1-7.21 29.942-24.064 44.454-61.174 26.544 2.104-21.306 13.014-36.545 31.463-36.644zm-293.553 50.96c-1.226-.01-2.446-.003-3.66.018-30.175.536-56.142 10.59-75.743 26.574-43.444 35.43-57.27 100.752-12.824 166.192 20.293 33.995 44.432 54.24 70.797 64.187 32.85 12.395 66.655 8.823 99.94 4.114 33.284-4.71 65.854-10.63 96.896-8.42 31.04 2.212 62.09 10.18 90.505 41.165 19.374 21.125 46.887-1.627 23.82-24.156-35.024-34.207-72.527-47.42-109.377-50.04-36.85-2.62-72.2 4.698-104.207 9.228-32.007 4.53-60.272 6.552-84.558-2.61-14.39-5.43-28.308-14.802-41.55-31.142h351.744c13.673-52.293 14.867-106.368 1.873-142.072-19.765 8.49-42.412 12.9-66.2 13.197h-.002c-29.85.37-59.458-6.925-82.907-22.823-4.647 3.012-9.407 6.23-14.292 9.685l-5.734 4.057-5.49-4.382c-46.63-37.2-91.028-52.48-129.03-52.773z"/>
    </symbol>
</svg>

================
File: public/assets/mixed.svg
================
<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M20 7a2 2 0 0 1 2 2v.5c0 1.694 -2.247 5.49 -3.983 6.983l-.017 .013v.504a2 2 0 0 1 -1.85 1.995l-.15 .005h-8a2 2 0 0 1 -2 -2v-.496l-.065 -.053c-1.76 -1.496 -3.794 -4.965 -3.928 -6.77l-.007 -.181v-.5a2 2 0 0 1 2 -2z"></path></svg>

================
File: public/assets/open.svg
================
<svg xmlns="http://www.w3.org/2000/svg" stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M19 19H5V5h7V3H5a2 2 0 00-2 2v14a2 2 0 002 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"/></svg>

================
File: public/assets/paw.svg
================
<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 512 512" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M490.39 182.75c-5.55-13.19-14.77-22.7-26.67-27.49l-.16-.06a46.46 46.46 0 0 0-17-3.2h-.64c-27.24.41-55.05 23.56-69.19 57.61-10.37 24.9-11.56 51.68-3.18 71.64 5.54 13.2 14.78 22.71 26.73 27.5l.13.05a46.53 46.53 0 0 0 17 3.2c27.5 0 55.6-23.15 70-57.65 10.24-24.87 11.37-51.63 2.98-71.6zM381.55 329.61c-15.71-9.44-30.56-18.37-40.26-34.41C314.53 250.8 298.37 224 256 224s-58.57 26.8-85.39 71.2c-9.72 16.06-24.6 25-40.36 34.48-18.07 10.86-36.74 22.08-44.8 44.16a66.93 66.93 0 0 0-4.65 25c0 35.95 28 65.2 62.4 65.2 17.75 0 36.64-6.15 56.63-12.66 19.22-6.26 39.09-12.73 56.27-12.73s37 6.47 56.15 12.73C332.2 457.85 351 464 368.8 464c34.35 0 62.3-29.25 62.3-65.2a67 67 0 0 0-4.75-25c-8.06-22.1-26.74-33.33-44.8-44.19zM150 188.85c11.9 14.93 27 23.15 42.52 23.15a42.88 42.88 0 0 0 6.33-.47c32.37-4.76 52.54-44.26 45.92-90C242 102.3 234.6 84.39 224 71.11 212.12 56.21 197 48 181.49 48a42.88 42.88 0 0 0-6.33.47c-32.37 4.76-52.54 44.26-45.92 90 2.76 19.2 10.16 37.09 20.76 50.38zm163.16 22.68a42.88 42.88 0 0 0 6.33.47c15.53 0 30.62-8.22 42.52-23.15 10.59-13.29 17.95-31.18 20.75-50.4 6.62-45.72-13.55-85.22-45.92-90a42.88 42.88 0 0 0-6.33-.47C315 48 299.88 56.21 288 71.11c-10.6 13.28-18 31.19-20.76 50.44-6.62 45.72 13.55 85.22 45.92 89.98zM111.59 308.8l.14-.05c11.93-4.79 21.16-14.29 26.69-27.48 8.38-20 7.2-46.75-3.15-71.65C120.94 175.16 92.85 152 65.38 152a46.4 46.4 0 0 0-17 3.2l-.14.05c-11.9 4.75-21.13 14.29-26.66 27.48-8.38 20-7.2 46.75 3.15 71.65C39.06 288.84 67.15 312 94.62 312a46.4 46.4 0 0 0 16.97-3.2z"></path></svg>

================
File: public/assets/photo.svg
================
<svg xmlns="http://www.w3.org/2000/svg"   fill="#666666" viewBox="0 0 512 512" height="1em" width="1em"><path d="M457.6 140.2l-82.5-4-4.8-53.8c-1-11.3-11.1-19.2-22.9-18.3L51.5 88.4c-11.8 1-20.3 10.5-19.4 21.7l21.2 235.8c1 11.3 11.2 19.2 22.9 18.3l15-1.2-2.4 45.8c-.6 12.6 9.2 22.8 22.4 23.5L441.3 448c13.2.6 24.1-8.6 24.8-21.2L480 163.5c.6-12.5-9.3-22.7-22.4-23.3zm-354.9 5.3l-7.1 134.8L78.1 305 62 127v-.5-.5c1-5 4.4-9 9.6-9.4l261-21.4c5.2-.4 9.7 3 10.5 7.9 0 .2.3.2.3.4 0 .1.3.2.3.4l2.7 30.8-219-10.5c-13.2-.4-24.1 8.8-24.7 21.3zm334 236.9l-84.8-99.5-37.4 34.3-69.2-80.8-122.7 130.7L133 168v-.4c1-5.4 6.2-9.3 11.9-9l291.2 14c5.8.3 10.3 4.7 10.4 10.2 0 .2.3.3.3.5l-10.1 199.1z"/><path d="M384 256c17.6 0 32-14.4 32-32s-14.3-32-32-32c-17.6 0-32 14.3-32 32s14.3 32 32 32z"/></svg>

================
File: public/assets/upload.svg
================
<svg xmlns="http://www.w3.org/2000/svg" stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 384 512" height="1em" width="1em"><path d="M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm65.18 216.01H224v80c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16v-80H94.82c-14.28 0-21.41-17.29-11.27-27.36l96.42-95.7c6.65-6.61 17.39-6.61 24.04 0l96.42 95.7c10.15 10.07 3.03 27.36-11.25 27.36zM377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z"/></svg>

================
File: public/assets/wet.svg
================
<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 512 512" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M256 65c-65.3 0-124.4 10.69-166.36 27.5-20.99 8.4-37.64 18.3-48.6 28.7C30.09 131.5 25 141.8 25 152s5.09 20.5 16.04 30.8c10.96 10.4 27.61 20.3 48.6 28.7C131.6 228.3 190.7 239 256 239c65.3 0 124.4-10.7 166.4-27.5 20.9-8.4 37.6-18.3 48.6-28.7 10.9-10.3 16-20.6 16-30.8s-5.1-20.5-16-30.8c-11-10.4-27.7-20.3-48.6-28.7C380.4 75.69 321.3 65 256 65zm.1 13.53c51.3 0 97.8 6.57 132.1 17.57 17.2 5.5 31.4 12 41.9 20 10.6 7.9 18 18 18 29.9 0 11.9-7.4 22-18 29.9-10.5 8-24.7 14.5-41.9 20-34.3 11-80.8 17.6-132.1 17.6s-97.8-6.6-132.1-17.6c-17.2-5.5-31.43-12-41.95-20-10.51-7.9-17.95-18-17.95-29.9 0-11.9 7.44-22 17.95-29.9 10.52-8 24.75-14.5 41.95-20 34.3-11 80.8-17.57 132.1-17.57zm0 17.97c-49.8 0-94.8 6.6-126.7 16.7-15.9 5.1-28.5 11.2-36.49 17.2-8.01 6.1-10.81 11.3-10.81 15.6 0 4.3 2.8 9.5 10.81 15.6 7.99 6 20.59 12.1 36.49 17.2 31.9 10.1 76.9 16.7 126.7 16.7s94.8-6.6 126.7-16.7c15.9-5.1 28.5-11.2 36.5-17.2 8-6.1 10.8-11.3 10.8-15.6 0-4.3-2.8-9.5-10.8-15.6-8-6-20.6-12.1-36.5-17.2-31.9-10.1-76.9-16.7-126.7-16.7zM25 192.2V360c0 13.2 5.88 24.6 17.7 35.4 11.81 10.8 29.56 20.4 51.32 28.1C137.5 439 196.8 447 256 447c59.2 0 118.5-8 162-23.5 21.7-7.7 39.5-17.3 51.3-28.1 11.8-10.8 17.7-22.2 17.7-35.4V192.2c-1.2 1.3-2.4 2.5-3.7 3.7-13.3 12.6-31.8 23.4-54.3 32.3-44.8 18-105.8 28.8-173 28.8s-128.2-10.8-173.05-28.8c-22.45-8.9-40.94-19.7-54.27-32.3-1.28-1.2-2.5-2.4-3.68-3.7zM96 280l64.4 48.2c33.3-15.3 71.8-34.1 135.7-34.1 40 0 120 25.9 120 46 0 19.9-80 45.9-120 45.9-63.9 0-102.4-18.9-135.7-34.2L96 400z"></path></svg>

================
File: public/crud.js
================
const getFormData = (form) => {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);

    // Ensure checkboxes are properly captured in the data object
    form.querySelectorAll('input[type=checkbox]').forEach(el => {
        data[el.name] = el.checked ? true : false;
    });

    // Set a default value for studentName if left blank
    if (!data.studentName || data.studentName.trim() === '') {
        data.studentName = "Anonymous";
    }

    return data;
};

// Frontend validation to give feedback to the user
const validateItem = (data) => {
    const errors = [];
    noticeArea.style.display = errors.length ? 'block' : 'none';
    noticeArea.textContent = errors.join(' ');
    return errors.length === 0;
};

const saveItem = async (data) => {
    console.log(data);
    const endpoint = data._id ? `/api/item/${data._id}` : '/api/item/';
    const options = {
        method: data._id ? "PUT" : "POST",
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    };
    try {
        const response = await fetch(endpoint, options);
        const updatedItem = await response.json();
        renderItem(updatedItem); // Re-render item with updated data
    } catch (error) {
        console.log(error);
    }
};

const deleteItem = async (id) => {
    const endpoint = `/api/item/${id}`;
    const options = { method: "DELETE" };
    try {
        await fetch(endpoint, options);
        document.querySelector(`[data-id="${id}"]`).remove(); // Remove from DOM
    } catch (error) {
        console.log(error);
    }
};

const editItem = (data) => {
    // Populate the form with data to be edited
    Object.keys(data).forEach(field => {
        const element = itemForm.elements[field];
        if (element) {
            if (element.type === 'checkbox') {
                element.checked = data[field];
            } else if (element.type === "date") {
                element.value = new Date(data[field]).toLocaleDateString('en-CA');
            } else {
                element.value = data[field];
            }
        }
    });

    // Set the preview image for the file
    if (data.fileName) {
        imagePreview.setAttribute("src", '/uploads/' + data.fileName);
    }

    formHeading.innerHTML = `Edit ${data.workTitle}`;
};

// Template function to render an item
const template = (data) => DOMPurify.sanitize(`
    <section class="image"> 
        <div class="frame">
            <img src="${data.fileName ? '/uploads/' + data.fileName : '/assets/photo.svg'}" alt="${data.name}">
        </div> 
    </section>
    <section class="information">
        <header> 
            <h2>${data.workTitle}</h2>
            <h3>by ${data.studentName}</h3>
        </header>
        <main>
            <p class="program-year">${data.program}, ${data.year}</p>
        </main>
        <div class="options"> 
            <button class="edit" popovertarget="formPopover">Edit</button> 
            <button class="delete">Delete</button>
        </div>
    </section> 
`);


const renderItem = (data) => {
    const div = document.createElement('div');
    div.classList.add('item');
    div.setAttribute('data-id', data._id);
    div.innerHTML = template(data);
    div.querySelector('.edit').onclick = () => editItem(data);
    div.querySelector('.delete').onclick = () => deleteItem(data._id);
    const existingElement = document.querySelector(`[data-id="${data._id}"]`);
    existingElement ? content.replaceChild(div, existingElement) : content.prepend(div);
};

// Export functions for use in other modules
export { getFormData, validateItem, saveItem, renderItem, deleteItem };

================
File: public/form.css
================
/* Main Form Styling */
/* Main Form Styling */
form {
  display: flex;
  flex-direction: column;
  width: 100%;
  max-width: 900px;
  margin: 0 auto;
  padding: 2rem;
  background-color: #f9f9f9;
  border-radius: 24px;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
  box-sizing: border-box;
  padding: 50px;
}

/* Section Styling */
form section {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1rem;
  padding: 1rem;
  width: 100%;
  box-sizing: border-box;
}

/* Two-column layout for form section */
.two-column {
  display: grid;
  grid-template-columns: 1fr 1.5fr;
  gap: 1.5rem;
  width: 100%;
}

.first-column, .second-column {
  display: flex;
  flex-direction: column;
  width: 100%;
}

/* Row for Work Title and Year fields */
.form-row {
  display: grid;
  grid-template-columns: 3fr 1fr;
  gap: 1.5rem;
  width: 100%;
}

.space {
  height: 20px;
}

/* Fieldset styling */
fieldset {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  border: none;
  width: 100%;
}

/* Label styling */
label {
  font-weight: bold;
  color: #333;
  font-size: 0.9rem;
}

/* Input, select, and textarea styling */
input, select, textarea {
  padding: 0.75rem;
  border: 2px solid #333;
  border-radius: 20px;
  font-size: 1rem;
  width: 100%;
  background-color: #f9f9f9;
  box-sizing: border-box;
  font-family: inherit;
  outline: none;
}

input:focus, select:focus, textarea:focus {
  border-color: #888;
}

input::placeholder, textarea::placeholder {
  font-style: italic;
  color: #999;
  font-size: 0.9rem;
}

/* Small description text below labels */
small {
  font-size: 0.8rem;
  color: #888;
  margin-top: -0.5rem;
  font-style: italic;
}

/* Button Styling */
button {
  padding: 0.5rem 1.5rem;
  border: none;
  border-radius: 20px;
  background-color: #000;
  color: #fff;
  font-weight: bold;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s;
  width: auto;
}

button:hover {
  background-color: #444;
}

/* Button container styling */
.button-container {
  display: flex;
  gap: 1rem;
  justify-content: center;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .two-column, .form-row {
    grid-template-columns: 1fr;
  }
  form {
    width: 90vw;
    padding: 1rem;
  }
  form section {
    padding: 0.5rem;
  }
}

/* Popup Form Styling */
.form-popup {
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  border-radius: 8px;
  padding: 20px;
  z-index: 1000;
  max-width: 800px;
  width: 90%;
  overflow-y: auto;
  max-height: 80vh;
}

.form-popup.show {
  display: block;
}


fieldset:has(input[type=file]){  
  flex-direction: row; 
  justify-content: center;  
  align-items: center;
  gap: 2rem;
  flex-wrap: wrap;
}
input[type=file]{
  display: none;
}

fieldset div:has(input[type=file]){  
  display: flex;
  flex-direction: column;
  align-items: start;
  gap: 1rem;
}
fieldset:has(input[type=file]) h3{
  margin: 0px;
}  

#uploadButton{
   border: 0; 
  font-weight: 700;  
  background-color: #000;  
  padding: 0.5rem 1rem;
  border-radius: 1rem;
  color: white;
  cursor: pointer;
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

#uploadButton img{
  width: 1rem;
}


img#imagePreview{
   width: 8rem;
}
label:has(img#imagePreview){
  display: flex; 
  cursor: pointer;
}

================
File: public/index.html
================
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>FAAD Art Book</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <!-- Josefin Sans Font -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
  <!-- Ultra Font -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&family=Ultra&family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/dompurify@3.1.7/dist/purify.min.js" integrity="sha256-ZAdXaZOlqhMD6vn++5Xlz8HAyAZFvTcX22cXJ+a1W5E=" crossorigin="anonymous"></script>
  <link href="style.css" rel="stylesheet" type="text/css" />
  <link href="form.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <header>
    <h1> 
      <div class="headerImage">
        <div class="logo-container">
          <div class="logo">
            <img src="assets/Logo.png" alt="Logo"> 
          </div>
        </div>
        <div class="header">
          <div class="header-column">
            <div class="title">
              <h1>FAAD Student<br>Art Board</h1>
            </div>
          </div>
        </div>
        <button id="add">Share Your Work</button>
      </h1>  
  </header>

  <div popover id="formPopover">
    <form id="itemForm">
      <h2 id="formHeading">Share Your Work</h2>
      <section>
        <input type="hidden" name="_id">
        <div class="two-column">
          <!-- Left Column -->
          <div class="first-column">
            <fieldset id="uploadArea">   
              <label for="fileInput">
                <img id="imagePreview" src="assets/photo.svg" draggable="false">
              </label>
              <div>
                <h3>Upload Image</h3>
                <div class="dragAndDropLabel"> 
                  <img src="assets/dragdrop.svg" draggable="false">
                  <span>Drag and drop image file to upload</span>
                </div> 
                <input type="hidden" name="fileName">  
                <label for="fileInput" id="uploadButton"> 
                  <img src="assets/folder.svg" draggable="false">
                  <span>Browse</span> 
                </label> 
                <input type="file" accept="image/*" id="fileInput"> 
              </div>
            </fieldset>
          </div>
          <!-- Right Column -->
          <div class="second-column">
            <fieldset>
              <label for="program">Program</label>
              <select name="program" id="program" required>
                  <option value="" disabled selected>Select a Program</option>
                  <optgroup label="Programs">
                      <option value="Advanced Special Effects Makeup, Prosthetics and Props">Advanced Special Effects Makeup, Prosthetics and Props</option>
                      <option value="Advanced Television and Film">Advanced Television and Film</option>
                      <option value="Animation">Animation</option>
                      <option value="Art and Art History">Art and Art History</option>
                      <option value="Art Fundamentals">Art Fundamentals</option>
                      <option value="Computer Animation">Computer Animation</option>
                      <option value="Craft and Design (Ceramics)">Craft and Design (Ceramics)</option>
                      <option value="Craft and Design (Multidisciplinary)">Craft and Design (Multidisciplinary)</option>
                      <option value="Craft and Design (Textiles)">Craft and Design (Textiles)</option>
                      <option value="Digital Creature Animation – Technical Direction">Digital Creature Animation – Technical Direction</option>
                      <option value="Digital Product Design">Digital Product Design</option>
                      <option value="Experiential Design">Experiential Design</option>
                      <option value="Film and Television">Film and Television</option>
                      <option value="Furniture">Furniture</option>
                      <option value="Game Design">Game Design</option>
                      <option value="Game Level Design">Game Level Design</option>
                      <option value="Glass">Glass</option>
                      <option value="Illustration">Illustration</option>
                      <option value="Industrial Design">Industrial Design</option>
                      <option value="Interaction Design">Interaction Design</option>
                      <option value="Interior Decorating">Interior Decorating</option>
                      <option value="Interior Design">Interior Design</option>
                      <option value="Journalism">Journalism</option>
                      <option value="Makeup for Media and Creative Arts">Makeup for Media and Creative Arts</option>
                      <option value="Media Fundamentals">Media Fundamentals</option>
                      <option value="Music Scoring for Screen and Stage">Music Scoring for Screen and Stage</option>
                      <option value="Music Theatre Performance">Music Theatre Performance</option>
                      <option value="Performing Arts – Preparation">Performing Arts – Preparation</option>
                      <option value="Photography">Photography</option>
                      <option value="Public Relations – Corporate Communications">Public Relations – Corporate Communications</option>
                      <option value="Technical Production for the Performing Arts Industry">Technical Production for the Performing Arts Industry</option>
                      <option value="Theatre and Drama Studies">Theatre and Drama Studies</option>
                      <option value="Visual and Creative Arts">Visual and Creative Arts</option>
                      <option value="Visual Effects">Visual Effects</option>
                      <option value="Visual Merchandising Design">Visual Merchandising Design</option>
                      <option value="Visual Merchandising Design">Visual Merchandising Design</option>
                  </optgroup>
              </select>
          </fieldset>
      
          <fieldset>
              <label for="year">Year</label>
              <select id="year" name="year" required>
                  <option value="" disabled selected>Select a year</option> 
                  <option value="2024">2024</option>
                  <option value="2023">2023</option>
                  <option value="2022">2022</option>
                  <option value="2021">2021</option>
                  <option value="2020">2020</option>
                  <option value="2019">2019</option>
                  <option value="2018">2018</option>
              </select>
          </fieldset>
          
          <fieldset>
              <label for="workTitle">Work Title</label>
              <input required type="text" name="workTitle" id="workTitle" placeholder="e.g. Mona Lisa" autocomplete="off" />
          </fieldset>
      
          <fieldset>
              <label for="studentName">Student Name</label>
              <input type="text" name="studentName" id="studentName" placeholder="Optional" autocomplete="off" />
          </fieldset>

          <!-- Save and Cancel Buttons -->
          <div class="button-container">
            <button class="save" popovertarget="formPopover">Post</button>
            <button type="button" class="cancel">Cancel</button> 
          </div>

          </div>
        </div>
      </section>

      <section id="noticeArea"></section>
    </form>
  </div>

  <div class="grid-wrapper">
    <main id="content"></main>
  </div> 
     
  <footer>
    <p>Building on <a href="https://bender.sheridanc.on.ca/system-design/crud">prior explorations with CRUD</a>, this demo adds functionality for photo uploads.</p>
    <p>Created by <a  target="_blank" href="https://nsitu.ca">Harold Sikkema</a> in the context of Systems Design in the Interaction Design program at Sheridan College.</p>
  </footer> 

  <script type="module" src="script.js"></script>
</body>
</html>

================
File: public/script.js
================
// import helper functions for crud frontend user experience
import { getFormData, validateItem, saveItem, renderItem } from './crud.js';
// import upload handler
import './upload.js'
 

// function to fetch items and render them
const getItems = async () => {
  try { 
      const response = await fetch('/api/items');
      const items = await response.json(); 
      content.innerHTML = ''; // clear away any previous items
      content.classList.remove('loading')
      items.forEach(renderItem );
  } catch (error) {
      console.log(error);
  }
};

// Open the form for adding a new item
document.querySelector('button#add').addEventListener('click', event => {
  itemForm.reset();  
  formPopover.showPopover();
  formHeading.innerHTML = 'Share Your Work';
  document.querySelector('.save').textContent = 'Post';  // Set to "Post" when adding
});  

// Function to populate form for editing an item
const editItem = (data) => {
  // Set form heading
  formHeading.innerHTML = `Edit ${data.workTitle}`;
  document.querySelector('.save').textContent = 'Save';  // Set to "Save" when editing
  Object.keys(data).forEach(field => {
    const element = itemForm.elements[field];
    if (element) {
      if (element.type === 'checkbox') {
        element.checked = data[field];
      } else if (element.type === "date") {
        element.value = new Date(data[field]).toLocaleDateString('en-CA');
      } else {
        element.value = data[field];
      }
    }
  });

  if (data.fileName) {
    imagePreview.setAttribute("src", '/uploads/' + data.fileName);
  }
};

// Reset the form and set default text on "Save" button when reset
itemForm.addEventListener('reset', (event) => { 
  formHeading.innerHTML = 'Share Your Work';
  document.querySelector('.save').textContent = 'Post';  // Default to "Post" when form is reset
  noticeArea.style.display = 'none';
  noticeArea.textContent = '';
  event.currentTarget.elements['_id'].value = '';
});


// Listen for Form submit and save the data 
itemForm.addEventListener('submit', (event) => {
  event.preventDefault();
  const data = getFormData(event.target);
  if (validateItem(data)) {
    saveItem(data).then(() => { 
      itemForm.reset()
      formPopover.hidePopover()
    }); 
  }
});
 

// Function to reset the form.
// NOTE: this is augmenting the default reset behaviour which already blanks out most form elements.
// Here we also do a visual / narrative reset and blank out  hidden fields 
itemForm.addEventListener('reset', (event) => { 
  formHeading.innerHTML = 'Share Your Work'
  noticeArea.style.display = 'none';
  noticeArea.textContent = '';
  event.currentTarget.elements['_id'].value = ''
})

// Reset the form when we click the add or cancel buttons
// NOTE: popover behaviours are handled here explicitly 
// this helps to create a consistent experience between different browsers.
document.querySelector('button#add').addEventListener('click', event => {
  itemForm.reset()  
  formPopover.showPopover();
})  

document.querySelector('form button.cancel').addEventListener('click', event => {
  itemForm.reset()  
  formPopover.hidePopover();  // Explicitly hide popover
})  

// fetch the initial list of items
getItems();

================
File: public/style.css
================
/* General styling for body and background */
html, body {
  height: 100%;
  width: 100%; 
  margin: 0;
  min-height: 100vh;
  background: #F1EAE0;
  background-image: url('assets/Grid.png');
  background-size: cover;
  background-position: center;
  background-repeat: repeat;
  overflow-x: hidden; /* Prevent horizontal scroll */
}

html, body, button, input, textarea {
  font-family: "Josefin Sans", sans-serif;
  font-size: 1rem;
  font-weight: 300;
}

body {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
}

@media (max-width: 600px) {
  /* Add padding on phone screens */
  body {
    padding: 30px;
  }
}

h1, h2, h3 { 
  font-weight: 700;   
  text-align: center;
} 

/* Header styling */
body > header {
  margin: 0 auto;
  text-align: center;
  color: #fff;
}

.header h1 span {
  line-height: 2rem;
  max-width: 50vw;
}

.header h1 svg {   
  width: 4rem;
}

.header {
  width: 100vw;
  height: auto;
  display: flex;
  align-items: center;
  justify-content: center;
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  overflow: visible;
  padding: 20px;
  flex-direction: column;
}

.header-column {
  display: flex;
  align-items: center;
  gap: 20px;
}

.headerImage {
  background-image: url('assets/Decoration.png');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  height: auto;
  width: 100%;
}

/* Button styling */
button {
  border: 0;
  font-weight: 700;
  background-color: #000;
  padding: 0.5rem 1rem;
  border-radius: 1rem;
  color: white;
  cursor: pointer;
}

/* Main content area */
.grid-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
}

#content {
  display: grid;
  grid-template-columns: 1fr;
  gap: 2rem;
  justify-content: center;
  justify-items: center;
  width: 100%;
  max-width: 1200px;
}

/* Responsive layout for content */
@media (min-width: 600px) {
  #content {
    grid-template-columns: repeat(2, 1fr);
    gap: 2.5rem;
  }
}

@media (min-width: 900px) {
  #content {
    grid-template-columns: repeat(3, 1fr);
    gap: 3rem;
  }
}

/* CSS for item Cards */
.item {
  border-radius: 10px;
  background: white;
  border: 1px solid #333;
  box-shadow: 6px 8px 0px #333;
  width: 100%;
  max-width: 300px;
  text-align: center;
  font-family: "Josefin Sans", sans-serif;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  padding: 1rem;
  position: relative;
  padding-left: 20px;
}

/* Vertical Program Name, Year */
.item .program-year {
  position: absolute;
  top: 1rem;
  left: -0.5rem;
  font-size: 0.8rem;
  color: #666;
  writing-mode: vertical-rl;
  text-orientation: mixed;
  transform: rotate(180deg);
}

/* Image section */
.item .image {
  width: 100%;
  padding-top: 75%;
  background: #ddd;
  position: relative;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 8px;
}

.item .image img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Title */
.item .information header h2 {
  font-size: 1.5rem;
  font-weight: 700;
  margin: 0.5rem 0;
}

/* Name */
.item .information h3 {
  font-size: 1rem;
  color: #666;
  margin: 0.5rem 0;
  font-weight: 400;
}

/* Information (caption) area */
.item .information {
  padding: 1rem;
  font-size: 0.85rem;
  color: #333;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Edit and Delete Buttons */
.item .options {
  display: flex;
  gap: 1rem;
  justify-content: center;
  margin-top: 1rem;
}

.item .options button {
  padding: 0.5rem 1rem;
  font-weight: 700;
  background-color: #000;
  color: #fff;
  border-radius: 0.5rem;
  cursor: pointer;
  border: none;
}

/* Responsive form adjustments */
form {
  max-width: 100%;
  width: 90%;
  padding: 1rem;
  background: #ffffff;
  border-radius: 15px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  align-items: center;
  max-height: 80vh; /* Set a max height */
  overflow-y: auto; /* Enable vertical scrolling */
  overflow-x: hidden; /* Prevent horizontal scroll */
}

/* Two-column responsive layout for form */
.two-column {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1rem;
  width: 100%;
}

@media (min-width: 768px) {
  .two-column {
    grid-template-columns: 1fr 1fr;
  }
}

/* Individual field styling */
fieldset {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  border: none;
}

label {
  font-weight: bold;
  color: #333;
  font-size: 0.9rem;
}

input, select, textarea {
  padding: 0.5rem;
  border: 2px solid #333;
  border-radius: 10px;
  font-size: 1rem;
  width: 100%;
  background-color: #f9f9f9;
  outline: none;
}

input:focus, select:focus, textarea:focus {
  border-color: #888;
}

/* Responsive button adjustments */
.button-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  width: 100%;
}

@media (min-width: 480px) {
  .button-container {
    flex-direction: row;
  }
}

/* Footer styling */
footer {
  background: #263d4a;
  text-align: center;
  padding: 1.5rem;
  color: #fff;
  align-self: stretch;
}

footer a {
  color: #fff;
}

.title h1 {
  font-family: "Ultra", serif;
  font-weight: 700;
  font-size: 3rem;
  color: #333;
  line-height: 1.2;
}

.title h1 span {
  display: block;
  font-size: 1.5rem;
}

================
File: public/upload.js
================
// This module helps to handle image uploads

// Given a file, upload it.
// This works both via "Browse" ( file picker) and via drag-and-drop
const upload = async (theFile) => {
  // if the file is too big, prevent the upload 
  if (theFile.size > 10 * 1024 * 1024) {
    alert("Maximum file size is 10MB");
  } else {
    // activate a loading animation during upload
    imagePreview.setAttribute("src", "assets/load.svg");
    // Create a data structure for FormData and append the image data to it
    // Note: the body encoding here is "multipart/form-data"
    const formData = new FormData();
    formData.append("image", theFile);
    // prepare a POST request with the image file in the request body
    const endpoint = "/api/upload";
    const options = {
      method: "POST",
      body: formData,
    };
    try {
      // send the POST request prepared above
      const response = await fetch(endpoint, options); 
      // Check if the response is not OK (e.g., 500)
      if (!response.ok) {
        // Read and display error message from the response
        const errorData = await response.json();
        noticeArea.style.display = "block";
        noticeArea.textContent =
          errorData.message || "Something went wrong with the upload.";
        imagePreview.setAttribute("src", "assets/photo.svg");
        return; // Stop execution here if there's an error
      }

      // If response is OK, proceed with normal processing
      const uploadDetails = await response.json();
      console.log(uploadDetails);
      if (uploadDetails.newFileName) {
        // Set the uploaded file to appear as a preview in the form.
        imagePreview.setAttribute(
          "src",
          "/uploads/" + uploadDetails.newFileName
        );
        // Set a hidden value to match the uploaded filename (saved to MongoDB)
        itemForm.elements["fileName"].value = uploadDetails.newFileName;
      }
    } catch (err) {
      // Handle any fetch or network errors
      console.log(err); 
    }
  }
};

// BROWSE BUTTON
// if the user clicks the browse button and selects an image file
// A "change" event fires on the file input. 
// we can listen for this to trigger the upload process
fileInput.addEventListener("change", (event) => {
  upload(event.currentTarget.files[0]);
});

// DRAG AND DROP
// If the browser has a mouse or other accurate pointing device,
// we will enable drag and drop features.
// if a file is dropped onto the uploadArea, we will upload it
if (window.matchMedia("(pointer: fine)").matches) {
  // let's define some events for drag and drop behaviours
  // the area recieves a ".ready" CSS class during the relevant drag events
  // This allows us to style it as we like (e.g. make it green, etc.)
  let dragAndDropEvents = {
    dragenter: (event) => {
      uploadArea.classList.add("ready");
    },
    dragover: (event) => {
      uploadArea.classList.add("ready");
    },
    dragleave: (event) => {
      if (!uploadArea.contains(event.relatedTarget)) {
        uploadArea.classList.remove("ready");
      }
    },
    drop: (event) => {  
        uploadArea.classList.remove("ready"); 
        // Get the dropped file and check its type
        const file = event.dataTransfer.files[0];
        console.log(file)
        if (!file.type.startsWith('image/')) {
            // Display an error message for unsupported file types
            noticeArea.style.display = 'block';
            noticeArea.textContent = 'Only image files are supported. Please upload a valid image.';
            imagePreview.setAttribute('src', 'assets/photo.svg');
            return; // Stop further execution if the file is not an image
        } 
        // If file type is valid, proceed with upload
        upload(file);
    }
  };
  // Activate all the above event handlers
  // also, prevent default event handler from running/propogating
  for (const [eventName, eventHandler] of Object.entries(dragAndDropEvents)) {
    uploadArea.addEventListener(eventName, (e) => e.preventDefault());
    uploadArea.addEventListener(eventName, (e) => e.stopPropagation());
    uploadArea.addEventListener(eventName, eventHandler);
  }
}

================
File: .gitignore
================
# .gitignore
# This file tells Git which files or folders to ignore in your project  

# in the context of Codeserver, Readme contains sensitive info
README.md

# the filebrowser in CodeServer does not need to be committed to version control
filebrowser.db

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

#DynamoDB Local files 
.dynamodb/

================
File: database.js
================
// This  module defines a database connection to MongoDB
  

/* Connect to MongoDB:
To connect, you must add a MongoDB connection string as an environment variable 
The name/key of the environment variable must be "MONGODB"
The value of the variable must be a valid MongoDB connection string. 
You can locate the string in your MongoDB Atlas dashboard.
See also: https://account.mongodb.com/account/login  
See also: https://mongoosejs.com/docs/connections.html */ 
 
import mongoose from 'mongoose'  
mongoose.connect( process.env.MONGODB )
  .then(mongoose => {   
    console.log(`Mongoose ${mongoose.version} connected to MongoDB.`)
    console.log(`Host: ${mongoose.connection.host}`)
  })
  .catch(error => handleError(error)); 

const handleError = (error)=>{
  console.log("MongoDB connection failed.")
  console.log(error.message)
  if (process.env.MONGODB){
    console.log("MONGODB="+process.env.MONGODB) 
  }    
  else{
    console.log("MONGODB environment variable not found.") 
  }
}
 
function mongoReady(req, res, next) { 
    if (mongoose.connection.readyState !== 1) {
      return res.status(503).send()
    }
    next();
}

export {mongoReady}

================
File: filesystem.js
================
// This module defines and exports "deleteFile" a function to delete a file.
// When deleting items from Mongo, we may also need to delete a corresponding image file from the disk.

// Import "fs" (filesystem) library 
import fs from 'fs'
// Import the "path" library to help construct file and folder paths
import path from 'path'

// DELETE FILE 
// given the full path to a file, (e.g. an uploaded image file)
// delete the file from the filesystem. 
const deleteFile = async (fileName) => {  
  // Adjust the fileName to points to the full path of the file 
  // (e.g. in the uploads folder)
  // the result is something  like ""/public/uploads/1699046915848.jpg"
  fileName = path.join(process.cwd(), 'public', 'uploads', fileName)  
  // First check if the file exists by getting "statistics" from it
  try{   
    await fs.promises.stat(fileName)  
  }
  // if the file does not exist, let the user know
  catch (e){    
    return 'File does not exist.' 
  }  
  // Now try to delete (unlink) the file
  try{
    await fs.promises.unlink(fileName) 
    return 'File deleted.'
  }
  // if the delete process failed, let the user know
  catch (e){  
    console.log(e) 
    return 'Unable to delete file.' 
  }   
}

export { deleteFile }

================
File: index.js
================
// Express is a framework for building APIs and web apps
// See also: https://expressjs.com/
import express from 'express'  
const app = express()

// CORS middleware add CORS headers to our endpoints 
// This will allow us to use the API on any domain. 
// See also: https://www.npmjs.com/package/cors
// Tell our Express app to add CORS headers
import cors from 'cors'
app.use(cors())

// serve up the frontend (documentation)
app.use(express.static( 'public'))
// Enable express to parse JSON data
app.use(express.json()) 

// Our API is defined in separate modules to keep things tidy.
// Let's import our API endpoints and activate them.
// Note that the '/api' prefix is important here:

// Here are the basic CRUD endpoints 
import { crudEndpoints } from './api/crud.js'
app.use('/api', crudEndpoints)

// Here is an endpoitn for handling file uploads. 
import { uploadEndpoint } from './api/upload.js'
app.use('/api', uploadEndpoint)
 
// Express starts listening   
app.listen(process.env.PORT,() => console.log("Express is Live."))

================
File: package.json
================
{
  "name": "sikkemha",
  "version": "1.0.0",
  "description": "This is a Shareable NodeJS workspace for use by Sheridan IXD students.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node --env-file=.env index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "module",
  "dependencies": {
    "busboy": "^1.6.0",
    "cors": "^2.8.5",
    "express": "^4.21.1",
    "mongoose": "^8.8.0",
    "sharp": "^0.33.5"
  }
}
